// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VIAPadelClub.Infrastructure.EfcDmPersistence;

#nullable disable

namespace VIAPadelClub.Infrastructure.EfcDmPersistence.Migrations
{
    [DbContext(typeof(DomainModelContext))]
    [Migration("20250429205335_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("DailyScheduleCourts", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourtName")
                        .HasColumnType("TEXT");

                    b.HasKey("ScheduleId", "CourtName");

                    b.HasIndex("CourtName");

                    b.ToTable("DailyScheduleCourts", (string)null);
                });

            modelBuilder.Entity("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.DailySchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("availableFrom")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("availableUntil")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("scheduleDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ScheduleId");

                    b.ToTable("DailySchedules", (string)null);
                });

            modelBuilder.Entity("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookedBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("BookedBy");

                    b.Property<DateOnly>("BookedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("BookedDate");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("BookingStatus");

                    b.Property<string>("CourtName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Duration");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("EndTime");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("CourtName");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.Entities.Court", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("CourtName");

                    b.HasKey("Name");

                    b.ToTable("Courts", (string)null);
                });

            modelBuilder.Entity("VIAPadelClub.Core.Domain.Aggregates.Players.Player", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isBlackListed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isQuarantined")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("fullName", "VIAPadelClub.Core.Domain.Aggregates.Players.Player.fullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("LastName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("url", "VIAPadelClub.Core.Domain.Aggregates.Players.Player.url#ProfileUri", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("ProfileUrl");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("vipMemberShip", "VIAPadelClub.Core.Domain.Aggregates.Players.Player.vipMemberShip#VipMemberShip", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("TEXT")
                                .HasColumnName("EndDate");

                            b1.Property<bool>("IsVIP")
                                .HasColumnType("INTEGER")
                                .HasColumnName("IsVip");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("TEXT")
                                .HasColumnName("StartDate");
                        });

                    b.HasKey("email");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("DailyScheduleCourts", b =>
                {
                    b.HasOne("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.Entities.Court", null)
                        .WithMany()
                        .HasForeignKey("CourtName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DailyScheduleCourts_Courts_CourtName");

                    b.HasOne("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.DailySchedule", null)
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DailyScheduleCourts_DailySchedules_ScheduleId");
                });

            modelBuilder.Entity("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.DailySchedule", b =>
                {
                    b.OwnsMany("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.Values.VipTimeRange", "vipTimeRanges", b1 =>
                        {
                            b1.Property<Guid>("DailyScheduleId")
                                .HasColumnType("TEXT");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("TEXT")
                                .HasColumnName("VipStart");

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("TEXT")
                                .HasColumnName("VipEnd");

                            b1.HasKey("DailyScheduleId", "Start", "End");

                            b1.ToTable("VipTimeRanges", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DailyScheduleId");
                        });

                    b.Navigation("vipTimeRanges");
                });

            modelBuilder.Entity("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.Entities.Booking", b =>
                {
                    b.HasOne("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.Entities.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.DailySchedule", null)
                        .WithMany("listOfBookings")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Court");
                });

            modelBuilder.Entity("VIAPadelClub.Core.Domain.Aggregates.Players.Player", b =>
                {
                    b.OwnsOne("VIAPadelClub.Core.Domain.Aggregates.Players.Entities.Quarantine", "activeQuarantine", b1 =>
                        {
                            b1.Property<string>("Playeremail")
                                .HasColumnType("TEXT");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("TEXT")
                                .HasColumnName("QuarantineEndDate");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("TEXT")
                                .HasColumnName("QuarantineStartDate");

                            b1.HasKey("Playeremail");

                            b1.ToTable("Player");

                            b1.WithOwner()
                                .HasForeignKey("Playeremail");
                        });

                    b.Navigation("activeQuarantine");
                });

            modelBuilder.Entity("VIAPadelClub.Core.Domain.Aggregates.DailySchedules.DailySchedule", b =>
                {
                    b.Navigation("listOfBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
